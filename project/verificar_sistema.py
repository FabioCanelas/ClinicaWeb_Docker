#!/usr/bin/env python3
"""
Script de verificaci√≥n del sistema de gesti√≥n de usuarios
Verifica que todas las funcionalidades est√©n operativas
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.app import create_app
from src.models.models import Usuario, Rol
from src.extensions import db

def verificar_rutas():
    """Verifica que todas las rutas est√©n definidas"""
    print("üîç Verificando rutas...")
    
    app = create_app()
    
    with app.app_context():
        # Lista de rutas cr√≠ticas que deben existir
        rutas_esperadas = [
            'admin.editar_usuario',
            'admin.eliminar_usuario', 
            'admin.cambiar_contrasena_propia',
            'admin.listar_administradores',
            'admin.toggle_estado_administrador',
            'admin.resetear_password_administrador',
            'auth.check_username'
        ]
        
        rutas_encontradas = []
        for rule in app.url_map.iter_rules():
            if rule.endpoint:
                rutas_encontradas.append(rule.endpoint)
        
        print(f"üìä Total de rutas registradas: {len(rutas_encontradas)}")
        
        # Verificar rutas cr√≠ticas
        faltantes = []
        for ruta in rutas_esperadas:
            if ruta in rutas_encontradas:
                print(f"‚úÖ {ruta}")
            else:
                print(f"‚ùå {ruta} - NO ENCONTRADA")
                faltantes.append(ruta)
        
        if faltantes:
            print(f"\n‚ö†Ô∏è  Rutas faltantes: {len(faltantes)}")
            return False
        else:
            print("\n‚úÖ Todas las rutas cr√≠ticas est√°n registradas")
            return True

def verificar_templates():
    """Verifica que los templates existan"""
    print("\nüé® Verificando templates...")
    
    templates_necesarios = [
        'src/templates/admin/editar_usuario.html',
        'src/templates/admin/cambiar_contrasena.html',
        'src/templates/admin/administradores.html',
        'src/templates/admin/doctores.html',
        'src/templates/admin/dashboard.html',
        'src/templates/auth/register.html'
    ]
    
    faltantes = []
    for template in templates_necesarios:
        if os.path.exists(template):
            print(f"‚úÖ {template}")
        else:
            print(f"‚ùå {template} - NO ENCONTRADO")
            faltantes.append(template)
    
    if faltantes:
        print(f"\n‚ö†Ô∏è  Templates faltantes: {len(faltantes)}")
        return False
    else:
        print("\n‚úÖ Todos los templates necesarios existen")
        return True

def verificar_base_datos():
    """Verifica la estructura de la base de datos"""
    print("\nüíæ Verificando estructura de base de datos...")
    
    app = create_app()
    
    try:
        with app.app_context():
            # Verificar que las tablas existan
            inspector = db.inspect(db.engine)
            tablas = inspector.get_table_names()
            
            tablas_necesarias = ['usuarios', 'roles', 'especialidades', 'pacientes', 'expedientes']
            
            for tabla in tablas_necesarias:
                if tabla in tablas:
                    print(f"‚úÖ Tabla '{tabla}' existe")
                else:
                    print(f"‚ùå Tabla '{tabla}' NO EXISTE")
                    return False
            
            # Verificar columnas cr√≠ticas en la tabla usuarios
            columnas_usuarios = inspector.get_columns('usuarios')
            nombres_columnas = [col['name'] for col in columnas_usuarios]
            
            columnas_necesarias = ['estado', 'fecha_creacion', 'ultimo_acceso', 'cambiar_contrasena']
            
            print("\nüîç Verificando columnas en tabla 'usuarios':")
            for columna in columnas_necesarias:
                if columna in nombres_columnas:
                    print(f"‚úÖ Columna '{columna}' existe")
                else:
                    print(f"‚ùå Columna '{columna}' NO EXISTE")
                    print("üí° Ejecute el script de migraci√≥n: python migrate_db.py")
                    return False
            
            print("\n‚úÖ Estructura de base de datos correcta")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar base de datos: {e}")
        return False

def verificar_datos_iniciales():
    """Verifica que existan los roles b√°sicos"""
    print("\nüë• Verificando datos iniciales...")
    
    app = create_app()
    
    try:
        with app.app_context():
            # Verificar roles
            roles_necesarios = ['administrador', 'doctor']
            
            for rol_nombre in roles_necesarios:
                rol = Rol.query.filter_by(nombre=rol_nombre).first()
                if rol:
                    print(f"‚úÖ Rol '{rol_nombre}' existe")
                else:
                    print(f"‚ùå Rol '{rol_nombre}' NO EXISTE")
                    return False
            
            # Verificar superadmin
            superadmin = Usuario.query.filter_by(superadmin=True).first()
            if superadmin:
                print(f"‚úÖ Superadmin existe: {superadmin.nombre_usuario}")
            else:
                print("‚ö†Ô∏è  No se encontr√≥ superadmin")
                print("üí° Puede crear uno con: python verificar_admin.py --crear-superadmin")
            
            print("\n‚úÖ Datos iniciales correctos")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar datos iniciales: {e}")
        return False

def verificar_funcionalidades_javascript():
    """Verifica que las funcionalidades JavaScript est√©n implementadas"""
    print("\n‚ö° Verificando funcionalidades JavaScript...")
    
    # Verificar register.html
    try:
        with open('src/templates/auth/register.html', 'r', encoding='utf-8') as f:
            contenido = f.read()
            
            funciones_necesarias = [
                'cleanUsernameFromPrefixes',
                'showPrefixWarning',
                'setupUsernameValidation',
                'updateUsernameField',
                'checkUserNameAvailability'
            ]
            
            for funcion in funciones_necesarias:
                if f'function {funcion}' in contenido:
                    print(f"‚úÖ Funci√≥n JavaScript '{funcion}' implementada")
                else:
                    print(f"‚ùå Funci√≥n JavaScript '{funcion}' NO ENCONTRADA")
                    return False
            
            # Verificar elementos cr√≠ticos
            elementos_criticos = [
                'input-username-container',
                'username-help',
                'prefix-warning',
                'username-feedback'
            ]
            
            for elemento in elementos_criticos:
                if elemento in contenido:
                    print(f"‚úÖ Elemento '{elemento}' presente")
                else:
                    print(f"‚ùå Elemento '{elemento}' NO ENCONTRADO")
                    return False
            
            print("\n‚úÖ Funcionalidades JavaScript correctas")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar JavaScript: {e}")
        return False

def verificar_permisos():
    """Verifica que los decoradores de permisos est√©n correctos"""
    print("\nüîê Verificando decoradores de permisos...")
    
    try:
        with open('src/routes/admin_routes.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
            
            # Verificar decoradores cr√≠ticos
            decoradores_esperados = [
                '@admin_required',
                '@superadmin_required', 
                '@login_required'
            ]
            
            for decorador in decoradores_esperados:
                if decorador in contenido:
                    count = contenido.count(decorador)
                    print(f"‚úÖ Decorador '{decorador}' usado {count} veces")
                else:
                    print(f"‚ùå Decorador '{decorador}' NO ENCONTRADO")
                    return False
            
            # Verificar funciones cr√≠ticas de seguridad
            funciones_seguridad = [
                'admin_required(f)',
                'superadmin_required(f)',
                'current_user.is_superadmin()',
                'current_user.is_admin()'
            ]
            
            for funcion in funciones_seguridad:
                if funcion in contenido:
                    print(f"‚úÖ Funci√≥n de seguridad '{funcion}' implementada")
                else:
                    print(f"‚ùå Funci√≥n de seguridad '{funcion}' NO ENCONTRADA")
                    return False
            
            print("\n‚úÖ Decoradores y permisos correctos")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar permisos: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ VERIFICACI√ìN COMPLETA DEL SISTEMA DE GESTI√ìN DE USUARIOS")
    print("=" * 60)
    
    verificaciones = [
        verificar_rutas,
        verificar_templates,
        verificar_base_datos,
        verificar_datos_iniciales,
        verificar_funcionalidades_javascript,
        verificar_permisos
    ]
    
    resultados = []
    
    for verificacion in verificaciones:
        try:
            resultado = verificacion()
            resultados.append(resultado)
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n: {e}")
            resultados.append(False)
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    exitosas = sum(resultados)
    total = len(resultados)
    
    print(f"‚úÖ Verificaciones exitosas: {exitosas}/{total}")
    
    if exitosas == total:
        print("üéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("‚ú® El sistema est√° completamente funcional")
        print("\nüìã Funcionalidades disponibles:")
        print("   ‚Ä¢ Edici√≥n de usuarios (superadmin y administradores)")
        print("   ‚Ä¢ Eliminaci√≥n de usuarios (con protecciones)")
        print("   ‚Ä¢ Cambio de contrase√±a propia")
        print("   ‚Ä¢ C√≥digo de emergencia para superadmin")
        print("   ‚Ä¢ Validaci√≥n de prefijos en registro")
        print("   ‚Ä¢ Verificaci√≥n AJAX de nombres de usuario")
        print("   ‚Ä¢ Gesti√≥n completa de administradores")
        print("   ‚Ä¢ Botones funcionales en todas las interfaces")
    else:
        print("‚ö†Ô∏è  ALGUNAS VERIFICACIONES FALLARON")
        print("üîß Revise los errores mostrados arriba")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
